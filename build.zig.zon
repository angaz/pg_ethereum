.{
    .name = "pg-ethereum",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        .pgzx = .{
            .url = "https://github.com/angaz/pgzx/archive/5e61eb2fb819d8546ae46544d0c63292f96143ab.tar.gz",
            .hash = "12203c4cbd20334f0f74082074a398b5349355f458677f3ca6721349aabe17630c07",
        },
        .@"zig-rlp" = .{
            .url = "https://github.com/angaz/zig-rlp/archive/da44f39e0670783afeecfe49c33a7a84af876f65.tar.gz",
            .hash = "122038dcc6b7cf765674164beb19c0698af8eee71f150ee7e073086ced4d59ec4c2f",
        },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
